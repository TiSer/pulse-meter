// Generated by CoffeeScript 1.2.1-pre
(function() {

  $(function() {
    var AppRouter, PageTitle, PageTitleList, PageTitleView, PageTitlesView, Widget, WidgetList, WidgetListView, WidgetView, appRouter, pageTitles, pageTitlesApp, widgetList, widgetListApp;
    Highcharts.setOptions({
      global: {
        useUTC: gon.options.useUtc
      }
    });
    PageTitle = Backbone.Model.extend({
      defaults: function() {
        return {
          title: "",
          selected: false
        };
      },
      initialize: function() {
        if (!this.get('title')) {
          this.set({
            'title': this.defaults.title
          });
        }
        return this.set('selected', this.defaults.selected);
      },
      clear: function() {
        return this.destroy();
      }
    });
    PageTitleList = Backbone.Collection.extend({
      model: PageTitle,
      selected: function() {
        return this.find(function(m) {
          return m.get('selected');
        });
      },
      selectFirst: function() {
        if (this.length > 0) return this.at(0).set('selected', true);
      },
      selectPage: function(id) {
        return this.each(function(m) {
          return m.set('selected', m.id === id);
        });
      }
    });
    pageTitles = new PageTitleList;
    PageTitleView = Backbone.View.extend({
      tagName: 'li',
      template: _.template('<a href="#/pages/<%= id  %>"><%= title %></a>'),
      initialize: function() {
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.remove, this);
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        if (this.model.get('selected')) {
          return this.$el.addClass('active');
        } else {
          return this.$el.removeClass('active');
        }
      }
    });
    PageTitlesView = Backbone.View.extend({
      initialize: function() {
        return pageTitles.bind('reset', this.render, this);
      },
      addOne: function(page_title) {
        var view;
        view = new PageTitleView({
          model: page_title
        });
        view.render();
        return $('#page-titles').append(view.el);
      },
      render: function() {
        $('#page-titles').empty();
        return pageTitles.each(this.addOne);
      }
    });
    pageTitlesApp = new PageTitlesView;
    pageTitles.reset(gon.pageTitles);
    Widget = Backbone.Model.extend({
      initialize: function() {
        return this.setNextFetch();
      },
      time: function() {
        return (new Date()).getTime();
      },
      setNextFetch: function() {
        return this.set('nextFetch', this.time() + this.get('interval') * 1000);
      },
      refetch: function() {
        if (this.time() > this.get('nextFetch')) {
          this.fetch();
          return this.setNextFetch();
        }
      }
    });
    WidgetList = Backbone.Collection.extend({
      model: Widget,
      url: function() {
        return ROOT + 'pages/' + pageTitles.selected().id + '/widgets';
      }
    });
    WidgetView = Backbone.View.extend({
      tagName: 'div',
      template: _.template($('#widget-template').html()),
      initialize: function() {
        this.model.bind('change', this.reRender, this);
        return this.model.bind('destroy', this.remove, this);
      },
      events: {
        "click #refresh": 'refresh'
      },
      refresh: function() {
        return this.model.fetch();
      },
      reRender: function() {
        this.render();
        return this.renderChart();
      },
      render: function() {
        this.$el.html(this.template(this.model.toJSON()));
        return this.$el.addClass("span" + (this.model.get('width')));
      },
      renderChart: function() {
        return this.chart = new Highcharts.Chart({
          chart: {
            renderTo: this.$el.find('#plotarea')[0],
            plotBorderWidth: 1,
            spacingLeft: 0,
            spacingRight: 0,
            type: this.model.get('type'),
            animation: false
          },
          credits: {
            enabled: false
          },
          title: {
            text: this.model.get('title')
          },
          xAxis: {
            type: 'datetime'
          },
          yAxis: {
            title: {
              text: this.model.get('valuesTitle')
            }
          },
          series: this.model.get('series'),
          plotOptions: {
            series: {
              animation: false
            }
          }
        });
      }
    });
    widgetList = new WidgetList;
    setInterval(function() {
      return widgetList.each(function(w) {
        return w.refetch();
      });
    }, 200);
    WidgetListView = Backbone.View.extend({
      initialize: function() {
        return widgetList.bind('reset', this.render, this);
      },
      render: function() {
        var container;
        container = $('#widgets');
        container.empty();
        return widgetList.each(function(w) {
          var view;
          view = new WidgetView({
            model: w
          });
          view.render();
          container.append(view.el);
          return view.renderChart();
        });
      }
    });
    widgetListApp = new WidgetListView;
    AppRouter = Backbone.Router.extend({
      routes: {
        'help': 'help',
        'pages/:id': 'getPage',
        '*actions': 'defaultRoute'
      },
      getPage: function(ids) {
        var id;
        id = parseInt(ids);
        pageTitles.selectPage(id);
        return widgetList.fetch();
      },
      defaultRoute: function(actions) {
        if (pageTitles.length > 0) return this.navigate('//pages/1');
      }
    });
    appRouter = new AppRouter;
    return Backbone.history.start();
  });

}).call(this);
